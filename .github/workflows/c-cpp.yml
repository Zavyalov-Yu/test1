name: C/C++ Build
on: [workflow_dispatch] #команда запуска workflow только в ручному режиме

env:
  source_file: ./Console_Application_test/Console_Application_test/Console_Application_test.cpp
  
# Запуск рабочего процесса состоит из одного или нескольких заданий, которые могут выполняться последовательно или параллельн
jobs:
    Build_linux:  # название дожоба
        #определяет, под какой системой будет работать данные workflow 
        runs-on: ubuntu-latest 
        steps:
          - name: clone repo
            uses: actions/checkout@v3
          - name: ls -a
            run:  ls -a
          - name: create folder 
            run:  mkdir build
          - name: build gcc
            run:  gcc ${{env.source_file}} -o ./build/run
          - name: ls -a
            run:  |
                ls -a
                echo -----------------
          - name: ls -a build
            run:  |
                ls -a build
                echo -----------------
          - name: use artifact
            uses: actions/upload-artifact@v3
            with:
                name: art_linux
                path: ./build/run
    
    Build_windows: # название дожоба
        runs-on: windows-latest
        steps:
          - name: clone repo
            uses: actions/checkout@v3
          - name: create folder 
            run:  mkdir build_Win
          - name: build gcc 
            run:  gcc ${{env.source_file}} -o ./build_Win/run
          - name: ls
            run:  |
                ls
                echo -----------------
          - name: ls build_Win
            run:  |
                ls  build_Win
                echo -----------------
          - name: use artifact
            uses: actions/upload-artifact@v3
            with:
                name: art_windows
                path: ./build_Win/run.exe

    Create_release: # название дожоба
        runs-on: ubuntu-latest
        needs: [Build_linux, Build_windows]
        steps:
          # загрузим артефакты, полученные в предыдущих джобах
          - name: Download artifact windows
            id: download_artifact_windows
            uses: actions/download-artifact@v3
            with:
                name: art_windows
                path: ./build_Win/run.exe
                
          - name: Download artifact linux
            id: download_artifact_linux
            uses: actions/download-artifact@v3
            with:
                name: art_linux
                path: ./build/run
          
          - name: print_path
            run: |
                echo "./"
                ls ./
                echo
                echo "./build/"
                ls ./build/
                echo
                echo "./"
                ls ./build_Win/
          # Создаем релиз, куда вдальнейшем добавим загруженные выше артефакты
          - name: create release
            id: create_release
            uses: actions/create-release@v1
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
                tag_name: v0.0.1
                release_name: Release v0.0.1
          
          # Добавляем в релиз файлы артефактов
          - name: Upload Release Asset
            id: upload_release_asset 
            uses: actions/upload-release-asset@v1
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
               upload_url: ${{ steps.create_release.outputs.upload_url }} 
               asset_path: ./build_Win/run.exe
               asset_name: download_artifact_windows 
               asset_content_type: application/octet-stream
